<!DOCTYPE hibernate-configuration PUBLIC
	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
	<session-factory>
		<!-- 数据库方言，更高效使用数据库 ，因为数据库都有一些区别通过方言就可以对应使用目标数据库的特点 MySQLInnoDBDialect 
			MySQL数据库5.5之前使用 MySQL5InnoDBDialect MySQL数据库5.5之后使用，更加高效操作MySQL数据库 
			这个方言是支持事务的；
			-->
		<property name="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</property>
		<!-- 驱动类，现在可以不写了 -->
		<property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
		<!-- 数据库URL 完整的写法：jdbc:mysql://192.168.0.22:3306/hibernate_db 指定连接网络数据库 
			jdbc:mysql:///hibernate_db连接本机数据库 -->
		<property name="hibernate.connection.url">jdbc:mysql:///hibernate_db</property>
		<!-- 用户名 -->
		<property name="hibernate.connection.username">root</property>
		<!-- 密码 -->
		<property name="hibernate.connection.password">root</property>
		<!-- 是否自动创建没有的表 数据库自动创建表操作 create-drop 测试的时候用， 在程序启动(sessionFactory)的时候创建表，在程序退出的时候删除； 
			create 测试的时候用，在程序启动的时候先删除之前创建的表，然后新建表；
			 update 推荐使用， 在程序启动的时候，如果没有表就会自动创建；如果有表，就检查有没有更新； 
			validate 在程序启动的时候，检查表结构，不会创建表； -->
		<property name="hibernate.hbm2ddl.auto">update</property>
		<!-- 是否显示sql语句 -->
		<property name="show_sql">true</property>
		<!-- 是否显示格式化sql语句 -->
		<property name="hibernate.format_sql">true</property>
		<!-- 关联的xml文件 -->
		<mapping resource="com/stono/pojo/Person.hbm.xml" />
	</session-factory>
</hibernate-configuration>